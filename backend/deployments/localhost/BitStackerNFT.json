{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "INSUFFICIENT_FUNDS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINT_ONLY_NORMAL_TOKENS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINT_ONLY_VIP_TOKENS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_ENOUGH_HATHRATE_AVAILABLE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NULL_BALANCE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SALE_IS_NOT_LIVE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TOKEN_NOT_EXIST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UNABLE_TO_TRANSFER_FUNDS",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "THForPresale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THForPublicsale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "balancesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_vipBlack",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vipBlue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_black",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_blue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bitCoinAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "black",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "hashRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "terraHashedSold",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blue",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "hashRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "terraHashedSold",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "emailAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_THForpresale",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_THForPublicsale",
          "type": "uint256"
        }
      ],
      "name": "extendTerraHashes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hashesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_vipBlackHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vipBlueHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_blackHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_blueHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BitStackerNFT.Category",
          "name": "_category",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bitcoinAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_emailAddress",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bitcoinAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_emailAddress",
          "type": "string"
        }
      ],
      "name": "resetPersonalData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleType",
      "outputs": [
        {
          "internalType": "enum BitStackerNFT.SaleTpe",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BitStackerNFT.SaleTpe",
          "name": "_saleType",
          "type": "uint8"
        }
      ],
      "name": "setSaleType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terrahashesAvailabe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPresaleTerraHashesSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPublicsaleterraHashesSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTerraHashes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenid",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vipBlack",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "hashRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "terraHashedSold",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vipBlue",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "hashRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "terraHashedSold",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa816633b102bd65a22d3667e79af0e35664f4be8197e2c43abec739552650952",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2727965",
    "logsBloom": "0x
    "blockHash": "0x6abdf93514ea2dbb3aaaf7d581777cc7788b77a42f307169fdf6bcf20f039576",
    "transactionHash": "0xa816633b102bd65a22d3667e79af0e35664f4be8197e2c43abec739552650952",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xa816633b102bd65a22d3667e79af0e35664f4be8197e2c43abec739552650952",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6abdf93514ea2dbb3aaaf7d581777cc7788b77a42f307169fdf6bcf20f039576"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2727965",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "37c4db9d94b14ebbf42d58ad4ee35837",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINT_ONLY_NORMAL_TOKENS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINT_ONLY_VIP_TOKENS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_ENOUGH_HATHRATE_AVAILABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NULL_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SALE_IS_NOT_LIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TOKEN_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNABLE_TO_TRANSFER_FUNDS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"THForPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THForPublicsale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balancesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_vipBlack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vipBlue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_black\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bitCoinAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"black\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"hashRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terraHashedSold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blue\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"hashRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terraHashedSold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"emailAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_THForpresale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_THForPublicsale\",\"type\":\"uint256\"}],\"name\":\"extendTerraHashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hashesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_vipBlackHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vipBlueHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blackHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blueHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BitStackerNFT.Category\",\"name\":\"_category\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bitcoinAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_emailAddress\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bitcoinAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_emailAddress\",\"type\":\"string\"}],\"name\":\"resetPersonalData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleType\",\"outputs\":[{\"internalType\":\"enum BitStackerNFT.SaleTpe\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BitStackerNFT.SaleTpe\",\"name\":\"_saleType\",\"type\":\"uint8\"}],\"name\":\"setSaleType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terrahashesAvailabe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPresaleTerraHashesSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPublicsaleterraHashesSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTerraHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vipBlack\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"hashRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terraHashedSold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vipBlue\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"hashRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terraHashedSold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BitStackerNFT.sol\":\"BitStackerNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BitStackerNFT.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n\\r\\n/*\\r\\n\\r\\n\\r\\n- Updates in the contract:\\r\\n    Add \\u201cbitcoin address\\u201d and \\u201cemail address\\u201d inputs in the minting process\\r\\n    On transferring a token, its bitcoin address and email address will reset\\r\\n    Add functionality to update the bitcoin address and email address by the token owner\\r\\n\\r\\n- Updates in the front-end:\\r\\n    Users can request the withdrawal through signing a message with their wallet and we will send \\r\\n    an encrypted message along with their tokenid, Ethereum address and bitcoin address\\u00a0to\\u00a0the\\u00a0admin.\\r\\n\\r\\n*/\\r\\n\\r\\nerror SALE_IS_NOT_LIVE();\\r\\nerror MINT_ONLY_VIP_TOKENS();\\r\\nerror MINT_ONLY_NORMAL_TOKENS();\\r\\nerror INSUFFICIENT_FUNDS();\\r\\nerror NOT_ENOUGH_HATHRATE_AVAILABLE();\\r\\nerror NULL_BALANCE();\\r\\nerror UNABLE_TO_TRANSFER_FUNDS();\\r\\nerror TOKEN_NOT_EXIST();\\r\\nerror BOTH_CANT_BE_TRUE();\\r\\n\\r\\ncontract BitStackerNFT is Ownable, ERC1155Supply {\\r\\n\\r\\n    uint public THForPresale = 120_000;\\r\\n    uint public THForPublicsale = 40_000;\\r\\n    uint public totalTerraHashes = THForPresale + THForPublicsale;\\r\\n\\r\\n    // Types of tokens  -> For Mainnet\\r\\n    Tokentype public vipBlack = Tokentype(0, 40, 2 ether, 0);\\r\\n    Tokentype public vipBlue = Tokentype(1, 4, 0.2 ether, 0);\\r\\n    Tokentype public black = Tokentype(2, 20, 1 ether, 0);\\r\\n    Tokentype public blue = Tokentype(3, 4, 0.2 ether, 0);\\r\\n\\r\\n\\r\\n    // Types of tokens  -> For Testnet\\r\\n    // Tokentype public vipBlack = Tokentype(0, 40, 0.00001 ether, 0);\\r\\n    // Tokentype public vipBlue = Tokentype(1, 4, 0.00001 ether, 0);\\r\\n    // Tokentype public black = Tokentype(2, 20, 0.00001 ether, 0);\\r\\n    // Tokentype public blue = Tokentype(3, 4, 0.00001 ether, 0);\\r\\n\\r\\n    string public name = \\\"BitStacker Tokens\\\";\\r\\n    string private baseURL = \\\"https://ipfs.io/ipfs/QmXtQ3CdFaTMRFBAz36N47R8dhJ1REPKnxaGxaS47SxroA/\\\";\\r\\n\\r\\n    mapping (address => string) public bitCoinAddress;\\r\\n    mapping (address => string) public emailAddress;\\r\\n\\r\\n    enum Category { VIPBLACK, VIPBLUE, BLACK, BLUE }\\r\\n\\r\\n    struct Tokentype {\\r\\n        uint8 id;\\r\\n        uint hashRate;\\r\\n        uint price;\\r\\n        uint terraHashedSold;\\r\\n    }\\r\\n\\r\\n    enum SaleTpe { CLOSED, PRIVATE, PUBLIC }\\r\\n    SaleTpe public saleType = SaleTpe.CLOSED;\\r\\n    // bool public publicSale = false;\\r\\n\\r\\n    constructor() ERC1155(\\\"\\\"){}\\r\\n    \\r\\n    function mint(\\r\\n        Category _category, \\r\\n        uint256 _amount,\\r\\n        string memory _bitcoinAddress,\\r\\n        string memory _emailAddress\\r\\n        ) payable public {\\r\\n\\r\\n        if(saleType == SaleTpe.CLOSED) revert SALE_IS_NOT_LIVE();\\r\\n\\r\\n        if(saleType == SaleTpe.PRIVATE){\\r\\n\\r\\n            // if(_category != Category.VIPBLACK && _category != Category.VIPBLUE){\\r\\n            //     revert MINT_ONLY_VIP_TOKENS();\\r\\n            // }\\r\\n\\r\\n\\r\\n            if(_category == Category.VIPBLACK){\\r\\n                uint totalCost = vipBlack.price * _amount;\\r\\n                if(msg.value < totalCost) revert INSUFFICIENT_FUNDS();\\r\\n                uint totalTerraHashesMinting = vipBlack.hashRate * _amount;\\r\\n                if(totalPresaleTerraHashesSold() + totalTerraHashesMinting > THForPresale){\\r\\n                    revert NOT_ENOUGH_HATHRATE_AVAILABLE();\\r\\n                }\\r\\n                vipBlack.terraHashedSold += totalTerraHashesMinting;\\r\\n                _mint(msg.sender, uint256(_category), _amount, \\\"\\\");\\r\\n            }\\r\\n            else if(_category == Category.VIPBLUE) {\\r\\n                uint totalCost = vipBlue.price * _amount;\\r\\n                if(msg.value < totalCost) revert INSUFFICIENT_FUNDS();\\r\\n                uint totalTerraHashesMinting = vipBlue.hashRate * _amount;\\r\\n                if(totalPresaleTerraHashesSold() + totalTerraHashesMinting > THForPresale){\\r\\n                    revert NOT_ENOUGH_HATHRATE_AVAILABLE();\\r\\n                }\\r\\n                vipBlue.terraHashedSold += totalTerraHashesMinting;\\r\\n                _mint(msg.sender, uint256(_category), _amount, \\\"\\\");\\r\\n            }\\r\\n            else {\\r\\n                revert MINT_ONLY_VIP_TOKENS();\\r\\n            }\\r\\n\\r\\n\\r\\n        }\\r\\n        else if(saleType == SaleTpe.PUBLIC){\\r\\n        // else if () {\\r\\n\\r\\n            // if(_category != Category.BLACK && _category != Category.BLUE){\\r\\n            //     revert MINT_ONLY_NORMAL_TOKENS();\\r\\n            // }\\r\\n\\r\\n            if(_category == Category.BLACK){\\r\\n                uint totalCost = black.price * _amount;\\r\\n                if(msg.value < totalCost) revert INSUFFICIENT_FUNDS();\\r\\n                uint totalTerraHashesMinting = black.hashRate * _amount;\\r\\n                if(totalPublicsaleterraHashesSold() + totalTerraHashesMinting > THForPublicsale){\\r\\n                    revert NOT_ENOUGH_HATHRATE_AVAILABLE();\\r\\n                }\\r\\n                black.terraHashedSold += totalTerraHashesMinting;\\r\\n                _mint(msg.sender, uint256(_category), _amount, \\\"\\\");\\r\\n            }\\r\\n            else if(_category == Category.BLUE){\\r\\n                uint totalCost = blue.price * _amount;\\r\\n                if(msg.value < totalCost) revert INSUFFICIENT_FUNDS();\\r\\n                uint totalTerraHashesMinting = blue.hashRate * _amount;\\r\\n                if(totalPublicsaleterraHashesSold() + totalTerraHashesMinting > THForPublicsale){\\r\\n                    revert NOT_ENOUGH_HATHRATE_AVAILABLE();\\r\\n                }\\r\\n                blue.terraHashedSold += totalTerraHashesMinting;\\r\\n                _mint(msg.sender, uint256(_category), _amount, \\\"\\\");\\r\\n            }\\r\\n            else {\\r\\n                revert MINT_ONLY_NORMAL_TOKENS();\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        bitCoinAddress[msg.sender] = _bitcoinAddress;\\r\\n        emailAddress[msg.sender] = _emailAddress;\\r\\n\\r\\n    }\\r\\n\\r\\n    function totalPresaleTerraHashesSold() public view returns(uint) {\\r\\n        return vipBlack.terraHashedSold + vipBlue.terraHashedSold;\\r\\n    }\\r\\n\\r\\n    function totalPublicsaleterraHashesSold() public view  returns(uint) {\\r\\n        return black.terraHashedSold + blue.terraHashedSold;\\r\\n    }\\r\\n\\r\\n    function terrahashesAvailabe() public view returns(uint){\\r\\n        return (totalTerraHashes - (totalPresaleTerraHashesSold() + totalPublicsaleterraHashesSold()));\\r\\n    }\\r\\n\\r\\n    function uri(uint256 _tokenid) override public view returns (string memory) {\\r\\n        if(!exists(_tokenid)) revert TOKEN_NOT_EXIST();\\r\\n\\r\\n        return string(\\r\\n            abi.encodePacked(\\r\\n                baseURL,\\r\\n                Strings.toString(_tokenid),\\\".json\\\"\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    function resetPersonalData(\\r\\n        string memory _bitcoinAddress,\\r\\n        string memory _emailAddress\\r\\n    ) public {\\r\\n        bitCoinAddress[msg.sender] = _bitcoinAddress;\\r\\n        emailAddress[msg.sender] = _emailAddress;\\r\\n    }\\r\\n\\r\\n    function balancesOf(address user) public view returns(\\r\\n        uint256 _vipBlack, uint256 _vipBlue, uint256 _black, uint256 _blue\\r\\n    ) {\\r\\n        _vipBlack = balanceOf(user, 0);\\r\\n        _vipBlue = balanceOf(user, 1);\\r\\n        _black = balanceOf(user, 2);\\r\\n        _blue = balanceOf(user, 3);\\r\\n    }\\r\\n\\r\\n    function hashesOf(address user) public view returns(\\r\\n        uint256 _vipBlackHash, uint256 _vipBlueHash, uint256 _blackHash, uint256 _blueHash\\r\\n    ) {\\r\\n        _vipBlackHash = (balanceOf(user, 0))*vipBlack.hashRate;\\r\\n        _vipBlueHash = (balanceOf(user, 1))*vipBlue.hashRate;\\r\\n        _blackHash = (balanceOf(user, 2))*black.hashRate;\\r\\n        _blueHash = (balanceOf(user, 3))*blue.hashRate;\\r\\n    }\\r\\n\\r\\n    // Functions for administration\\r\\n\\r\\n    function setSaleType(SaleTpe _saleType) public onlyOwner {\\r\\n        saleType = _saleType;\\r\\n\\r\\n    }\\r\\n\\r\\n    function extendTerraHashes(uint _THForpresale, uint _THForPublicsale) public onlyOwner {\\r\\n        THForPresale = _THForpresale;\\r\\n        THForPublicsale = _THForPublicsale;\\r\\n        totalTerraHashes = _THForpresale + _THForPublicsale;\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdrawFunds() public onlyOwner {\\r\\n        uint balance = address(this).balance;\\r\\n        if(balance == 0) revert NULL_BALANCE();\\r\\n        (bool res1,) = payable(owner()).call{value: balance}(\\\"\\\");\\r\\n        if(!res1) revert UNABLE_TO_TRANSFER_FUNDS();\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x39d51a716c214ec46715d6ea90428bd544554f8b04fef9049c8d4fe722144d72\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040526201d4c06005819055619c4060068190556200002091620002e9565b6007556040805160808082018352600080835260286020808501829052671bc16d674ec8000085870181905260609586018490526008805460ff19908116909155600993909355600a55600b83905585518085018752600180825260048284018190526702c68af0bb140000838a01819052928801869052600c80548616909217909155600d819055600e829055600f8590558751808701895260028082526014828601819052670de0b6b3a7640000838c01819052928a018890526010805488169092179091556011818155601292909255601387905589519788018a526003808952888601849052888b01859052979098018690528754909416909517909555601593909355601693909355601755825180840190935281835270426974537461636b657220546f6b656e7360781b9201918252620001649160189162000243565b5060405180608001604052806044815260200162002b27604491398051620001959160199160209091019062000243565b50601c805460ff19169055348015620001ad57600080fd5b50604080516020810190915260008152620001c833620001da565b620001d3816200022a565b506200034d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516200023f90600390602084019062000243565b5050565b828054620002519062000310565b90600052602060002090601f016020900481019282620002755760008555620002c0565b82601f106200029057805160ff1916838001178555620002c0565b82800160010185558215620002c0579182015b82811115620002c0578251825591602001919060010190620002a3565b50620002ce929150620002d2565b5090565b5b80821115620002ce5760008155600101620002d3565b600082198211156200030b57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200032557607f821691505b602082108114156200034757634e487b7160e01b600052602260045260246000fd5b50919050565b6127ca806200035d6000396000f3fe6080604052600436106101f85760003560e01c8063a22cb4651161010d578063d80df242116100a0578063ed18f0a71161006f578063ed18f0a714610613578063f242432a14610639578063f2fde38b14610659578063fe2ee3a014610679578063ffbc49cf1461069957600080fd5b8063d80df2421461057f578063db2ea71e14610595578063e985e9c5146105b5578063e9de7cc0146105fe57600080fd5b8063bd85b039116100dc578063bd85b039146104fc578063bdd3ad2c14610529578063c130c58c14610549578063c56ea1ee1461056957600080fd5b8063a22cb46514610483578063b50a707b146104a3578063b5aaf542146104c9578063bcdba104146104e957600080fd5b80635bcc79281161019057806380dc37a21161015f57806380dc37a2146103d15780638a95eb20146103e75780638b8fd3bd146103fc5780638da5cb5b14610446578063a0d2a9cc1461046e57600080fd5b80635bcc7928146103355780636392a51f1461035c578063715018a61461039c57806374621b7d146103b157600080fd5b806324600fc3116101cc57806324600fc3146102a25780632eb2c2d6146102b95780634e1273f4146102d95780634f558e791461030657600080fd5b8062fdd58e146101fd57806301ffc9a71461023057806306fdde03146102605780630e89341c14610282575b600080fd5b34801561020957600080fd5b5061021d610218366004611cb5565b6106bf565b6040519081526020015b60405180910390f35b34801561023c57600080fd5b5061025061024b366004611cf5565b610757565b6040519015158152602001610227565b34801561026c57600080fd5b506102756107a9565b6040516102279190611d75565b34801561028e57600080fd5b5061027561029d366004611d88565b610837565b3480156102ae57600080fd5b506102b7610898565b005b3480156102c557600080fd5b506102b76102d4366004611eed565b610937565b3480156102e557600080fd5b506102f96102f4366004611f97565b610983565b604051610227919061209d565b34801561031257600080fd5b50610250610321366004611d88565b600090815260046020526040902054151590565b34801561034157600080fd5b50601c5461034f9060ff1681565b60405161022791906120c6565b34801561036857600080fd5b5061037c6103773660046120ee565b610aad565b604080519485526020850193909352918301526060820152608001610227565b3480156103a857600080fd5b506102b7610aee565b3480156103bd57600080fd5b506102b76103cc366004612109565b610b02565b3480156103dd57600080fd5b5061021d60075481565b3480156103f357600080fd5b5061021d610b25565b34801561040857600080fd5b506010546011546012546013546104229360ff1692919084565b6040805160ff90951685526020850193909352918301526060820152608001610227565b34801561045257600080fd5b506000546040516001600160a01b039091168152602001610227565b34801561047a57600080fd5b5061021d610b53565b34801561048f57600080fd5b506102b761049e36600461212b565b610b65565b3480156104af57600080fd5b50600854600954600a54600b546104229360ff1692919084565b3480156104d557600080fd5b506102b76104e4366004612167565b610b70565b6102b76104f7366004612188565b610b9f565b34801561050857600080fd5b5061021d610517366004611d88565b60009081526004602052604090205490565b34801561053557600080fd5b5061037c6105443660046120ee565b610f6d565b34801561055557600080fd5b506102b761056436600461220c565b610fdf565b34801561057557600080fd5b5061021d60065481565b34801561058b57600080fd5b5061021d60055481565b3480156105a157600080fd5b506102756105b03660046120ee565b611025565b3480156105c157600080fd5b506102506105d0366004612266565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b34801561060a57600080fd5b5061021d61103e565b34801561061f57600080fd5b506014546015546016546017546104229360ff1692919084565b34801561064557600080fd5b506102b7610654366004612299565b611050565b34801561066557600080fd5b506102b76106743660046120ee565b611095565b34801561068557600080fd5b506102756106943660046120ee565b61110e565b3480156106a557600080fd5b50600c54600d54600e54600f546104229360ff1692919084565b60006001600160a01b03831661072f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060009081526001602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061078857506001600160e01b031982166303a24d0760e21b145b806107a357506301ffc9a760e01b6001600160e01b03198316145b92915050565b601880546107b6906122fe565b80601f01602080910402602001604051908101604052809291908181526020018280546107e2906122fe565b801561082f5780601f106108045761010080835404028352916020019161082f565b820191906000526020600020905b81548152906001019060200180831161081257829003601f168201915b505050505081565b6000818152600460205260409020546060906108665760405163090a452960e31b815260040160405180910390fd5b601961087183611127565b604051602001610882929190612355565b6040516020818303038152906040529050919050565b6108a061122d565b47806108bf5760405163341a36d360e21b815260040160405180910390fd5b600080546040516001600160a01b039091169083908381818185875af1925050503d806000811461090c576040519150601f19603f3d011682016040523d82523d6000602084013e610911565b606091505b5050905080610933576040516312e0222360e21b815260040160405180910390fd5b5050565b6001600160a01b038516331480610953575061095385336105d0565b61096f5760405162461bcd60e51b815260040161072690612410565b61097c8585858585611287565b5050505050565b606081518351146109e85760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610726565b6000835167ffffffffffffffff811115610a0457610a04611da1565b604051908082528060200260200182016040528015610a2d578160200160208202803683370190505b50905060005b8451811015610aa557610a78858281518110610a5157610a5161245f565b6020026020010151858381518110610a6b57610a6b61245f565b60200260200101516106bf565b828281518110610a8a57610a8a61245f565b6020908102919091010152610a9e8161248b565b9050610a33565b509392505050565b600080600080610abe8560006106bf565b9350610acb8560016106bf565b9250610ad88560026106bf565b9150610ae58560036106bf565b90509193509193565b610af661122d565b610b006000611475565b565b610b0a61122d565b60058290556006819055610b1e81836124a6565b6007555050565b6000610b2f61103e565b610b37610b53565b610b4191906124a6565b600754610b4e91906124be565b905090565b600f54600b54600091610b4e916124a6565b6109333383836114c5565b610b7861122d565b601c805482919060ff19166001836002811115610b9757610b976120b0565b021790555050565b6000601c5460ff166002811115610bb857610bb86120b0565b1415610bd75760405163336affa360e01b815260040160405180910390fd5b6001601c5460ff166002811115610bf057610bf06120b0565b1415610d9e576000846003811115610c0a57610c0a6120b0565b1415610cda57600a54600090610c219085906124d5565b905080341015610c4457604051631cf2628760e31b815260040160405180910390fd5b600954600090610c559086906124d5565b905060055481610c63610b53565b610c6d91906124a6565b1115610c8c57604051636304271f60e01b815260040160405180910390fd5b8060086003016000828254610ca191906124a6565b90915550610cd3905033876003811115610cbd57610cbd6120b0565b87604051806020016040528060008152506115a6565b5050610f2c565b6001846003811115610cee57610cee6120b0565b1415610d8557600e54600090610d059085906124d5565b905080341015610d2857604051631cf2628760e31b815260040160405180910390fd5b600d54600090610d399086906124d5565b905060055481610d47610b53565b610d5191906124a6565b1115610d7057604051636304271f60e01b815260040160405180910390fd5b80600c6003016000828254610ca191906124a6565b604051634d85ed5d60e11b815260040160405180910390fd5b6002601c5460ff166002811115610db757610db76120b0565b1415610f2c576002846003811115610dd157610dd16120b0565b1415610e6857601254600090610de89085906124d5565b905080341015610e0b57604051631cf2628760e31b815260040160405180910390fd5b601154600090610e1c9086906124d5565b905060065481610e2a61103e565b610e3491906124a6565b1115610e5357604051636304271f60e01b815260040160405180910390fd5b8060106003016000828254610ca191906124a6565b6003846003811115610e7c57610e7c6120b0565b1415610f1357601654600090610e939085906124d5565b905080341015610eb657604051631cf2628760e31b815260040160405180910390fd5b601554600090610ec79086906124d5565b905060065481610ed561103e565b610edf91906124a6565b1115610efe57604051636304271f60e01b815260040160405180910390fd5b8060146003016000828254610ca191906124a6565b60405163019d1a8f60e21b815260040160405180910390fd5b336000908152601a602090815260409091208351610f4c92850190611c00565b50336000908152601b60209081526040909120825161097c92840190611c00565b600080600080600860010154610f848660006106bf565b610f8e91906124d5565b600d54909450610f9f8660016106bf565b610fa991906124d5565b601154909350610fba8660026106bf565b610fc491906124d5565b601554909250610fd58660036106bf565b610ae591906124d5565b336000908152601a602090815260409091208351610fff92850190611c00565b50336000908152601b60209081526040909120825161102092840190611c00565b505050565b601a60205260009081526040902080546107b6906122fe565b601754601354600091610b4e916124a6565b6001600160a01b03851633148061106c575061106c85336105d0565b6110885760405162461bcd60e51b815260040161072690612410565b61097c85858585856116cb565b61109d61122d565b6001600160a01b0381166111025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610726565b61110b81611475565b50565b601b60205260009081526040902080546107b6906122fe565b60608161114b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611175578061115f8161248b565b915061116e9050600a8361250a565b915061114f565b60008167ffffffffffffffff81111561119057611190611da1565b6040519080825280601f01601f1916602001820160405280156111ba576020820181803683370190505b5090505b8415611225576111cf6001836124be565b91506111dc600a8661251e565b6111e79060306124a6565b60f81b8183815181106111fc576111fc61245f565b60200101906001600160f81b031916908160001a90535061121e600a8661250a565b94506111be565b949350505050565b6000546001600160a01b03163314610b005760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610726565b81518351146112e95760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610726565b6001600160a01b03841661130f5760405162461bcd60e51b815260040161072690612532565b3361131e818787878787611807565b60005b845181101561140757600085828151811061133e5761133e61245f565b60200260200101519050600085838151811061135c5761135c61245f565b60209081029190910181015160008481526001835260408082206001600160a01b038e1683529093529190912054909150818110156113ad5760405162461bcd60e51b815260040161072690612577565b60008381526001602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906113ec9084906124a6565b92505081905550505050806114009061248b565b9050611321565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516114579291906125c1565b60405180910390a461146d818787878787611980565b505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031614156115395760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610726565b6001600160a01b03838116600081815260026020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166116065760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610726565b33600061161285611aeb565b9050600061161f85611aeb565b905061163083600089858589611807565b60008681526001602090815260408083206001600160a01b038b168452909152812080548792906116629084906124a6565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46116c283600089898989611b36565b50505050505050565b6001600160a01b0384166116f15760405162461bcd60e51b815260040161072690612532565b3360006116fd85611aeb565b9050600061170a85611aeb565b905061171a838989858589611807565b60008681526001602090815260408083206001600160a01b038c1684529091529020548581101561175d5760405162461bcd60e51b815260040161072690612577565b60008781526001602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061179c9084906124a6565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46117fc848a8a8a8a8a611b36565b505050505050505050565b6001600160a01b03851661188e5760005b835181101561188c578281815181106118335761183361245f565b6020026020010151600460008684815181106118515761185161245f565b60200260200101518152602001908152602001600020600082825461187691906124a6565b9091555061188590508161248b565b9050611818565b505b6001600160a01b03841661146d5760005b83518110156116c25760008482815181106118bc576118bc61245f565b6020026020010151905060008483815181106118da576118da61245f565b602002602001015190506000600460008481526020019081526020016000205490508181101561195d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610726565b600092835260046020526040909220910390556119798161248b565b905061189f565b6001600160a01b0384163b1561146d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906119c490899089908890889088906004016125e6565b602060405180830381600087803b1580156119de57600080fd5b505af1925050508015611a0e575060408051601f3d908101601f19168201909252611a0b91810190612644565b60015b611abb57611a1a612661565b806308c379a01415611a545750611a2f61267d565b80611a3a5750611a56565b8060405162461bcd60e51b81526004016107269190611d75565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610726565b6001600160e01b0319811663bc197c8160e01b146116c25760405162461bcd60e51b815260040161072690612707565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611b2557611b2561245f565b602090810291909101015292915050565b6001600160a01b0384163b1561146d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611b7a908990899088908890889060040161274f565b602060405180830381600087803b158015611b9457600080fd5b505af1925050508015611bc4575060408051601f3d908101601f19168201909252611bc191810190612644565b60015b611bd057611a1a612661565b6001600160e01b0319811663f23a6e6160e01b146116c25760405162461bcd60e51b815260040161072690612707565b828054611c0c906122fe565b90600052602060002090601f016020900481019282611c2e5760008555611c74565b82601f10611c4757805160ff1916838001178555611c74565b82800160010185558215611c74579182015b82811115611c74578251825591602001919060010190611c59565b50611c80929150611c84565b5090565b5b80821115611c805760008155600101611c85565b80356001600160a01b0381168114611cb057600080fd5b919050565b60008060408385031215611cc857600080fd5b611cd183611c99565b946020939093013593505050565b6001600160e01b03198116811461110b57600080fd5b600060208284031215611d0757600080fd5b8135611d1281611cdf565b9392505050565b60005b83811015611d34578181015183820152602001611d1c565b83811115611d43576000848401525b50505050565b60008151808452611d61816020860160208601611d19565b601f01601f19169290920160200192915050565b602081526000611d126020830184611d49565b600060208284031215611d9a57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715611ddd57611ddd611da1565b6040525050565b600067ffffffffffffffff821115611dfe57611dfe611da1565b5060051b60200190565b600082601f830112611e1957600080fd5b81356020611e2682611de4565b604051611e338282611db7565b83815260059390931b8501820192828101915086841115611e5357600080fd5b8286015b84811015611e6e5780358352918301918301611e57565b509695505050505050565b600082601f830112611e8a57600080fd5b813567ffffffffffffffff811115611ea457611ea4611da1565b604051611ebb601f8301601f191660200182611db7565b818152846020838601011115611ed057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611f0557600080fd5b611f0e86611c99565b9450611f1c60208701611c99565b9350604086013567ffffffffffffffff80821115611f3957600080fd5b611f4589838a01611e08565b94506060880135915080821115611f5b57600080fd5b611f6789838a01611e08565b93506080880135915080821115611f7d57600080fd5b50611f8a88828901611e79565b9150509295509295909350565b60008060408385031215611faa57600080fd5b823567ffffffffffffffff80821115611fc257600080fd5b818501915085601f830112611fd657600080fd5b81356020611fe382611de4565b604051611ff08282611db7565b83815260059390931b850182019282810191508984111561201057600080fd5b948201945b838610156120355761202686611c99565b82529482019490820190612015565b9650508601359250508082111561204b57600080fd5b5061205885828601611e08565b9150509250929050565b600081518084526020808501945080840160005b8381101561209257815187529582019590820190600101612076565b509495945050505050565b602081526000611d126020830184612062565b634e487b7160e01b600052602160045260246000fd5b60208101600383106120e857634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561210057600080fd5b611d1282611c99565b6000806040838503121561211c57600080fd5b50508035926020909101359150565b6000806040838503121561213e57600080fd5b61214783611c99565b91506020830135801515811461215c57600080fd5b809150509250929050565b60006020828403121561217957600080fd5b813560038110611d1257600080fd5b6000806000806080858703121561219e57600080fd5b8435600481106121ad57600080fd5b935060208501359250604085013567ffffffffffffffff808211156121d157600080fd5b6121dd88838901611e79565b935060608701359150808211156121f357600080fd5b5061220087828801611e79565b91505092959194509250565b6000806040838503121561221f57600080fd5b823567ffffffffffffffff8082111561223757600080fd5b61224386838701611e79565b9350602085013591508082111561225957600080fd5b5061205885828601611e79565b6000806040838503121561227957600080fd5b61228283611c99565b915061229060208401611c99565b90509250929050565b600080600080600060a086880312156122b157600080fd5b6122ba86611c99565b94506122c860208701611c99565b93506040860135925060608601359150608086013567ffffffffffffffff8111156122f257600080fd5b611f8a88828901611e79565b600181811c9082168061231257607f821691505b6020821081141561233357634e487b7160e01b600052602260045260246000fd5b50919050565b6000815161234b818560208601611d19565b9290920192915050565b600080845481600182811c91508083168061237157607f831692505b602080841082141561239157634e487b7160e01b86526022600452602486fd5b8180156123a557600181146123b6576123e3565b60ff198616895284890196506123e3565b60008b81526020902060005b868110156123db5781548b8201529085019083016123c2565b505084890196505b5050505050506124076123f68286612339565b64173539b7b760d91b815260050190565b95945050505050565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561249f5761249f612475565b5060010190565b600082198211156124b9576124b9612475565b500190565b6000828210156124d0576124d0612475565b500390565b60008160001904831182151516156124ef576124ef612475565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612519576125196124f4565b500490565b60008261252d5761252d6124f4565b500690565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006125d46040830185612062565b82810360208401526124078185612062565b6001600160a01b0386811682528516602082015260a06040820181905260009061261290830186612062565b82810360608401526126248186612062565b905082810360808401526126388185611d49565b98975050505050505050565b60006020828403121561265657600080fd5b8151611d1281611cdf565b600060033d111561267a5760046000803e5060005160e01c5b90565b600060443d101561268b5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156126bb57505050505090565b82850191508151818111156126d35750505050505090565b843d87010160208285010111156126ed5750505050505090565b6126fc60208286010187611db7565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061278990830184611d49565b97965050505050505056fea2646970667358221220944fb85811767c71db9b14338e96912f67e1f2e4ef13cbb995fe2543b52a889364736f6c6343000809003368747470733a2f2f697066732e696f2f697066732f516d5874513343644661544d524642417a33364e3437523864684a315245504b6e78614778615334375378726f412f",
  "deployedBytecode": "0x6080604052600436106101f85760003560e01c8063a22cb4651161010d578063d80df242116100a0578063ed18f0a71161006f578063ed18f0a714610613578063f242432a14610639578063f2fde38b14610659578063fe2ee3a014610679578063ffbc49cf1461069957600080fd5b8063d80df2421461057f578063db2ea71e14610595578063e985e9c5146105b5578063e9de7cc0146105fe57600080fd5b8063bd85b039116100dc578063bd85b039146104fc578063bdd3ad2c14610529578063c130c58c14610549578063c56ea1ee1461056957600080fd5b8063a22cb46514610483578063b50a707b146104a3578063b5aaf542146104c9578063bcdba104146104e957600080fd5b80635bcc79281161019057806380dc37a21161015f57806380dc37a2146103d15780638a95eb20146103e75780638b8fd3bd146103fc5780638da5cb5b14610446578063a0d2a9cc1461046e57600080fd5b80635bcc7928146103355780636392a51f1461035c578063715018a61461039c57806374621b7d146103b157600080fd5b806324600fc3116101cc57806324600fc3146102a25780632eb2c2d6146102b95780634e1273f4146102d95780634f558e791461030657600080fd5b8062fdd58e146101fd57806301ffc9a71461023057806306fdde03146102605780630e89341c14610282575b600080fd5b34801561020957600080fd5b5061021d610218366004611cb5565b6106bf565b6040519081526020015b60405180910390f35b34801561023c57600080fd5b5061025061024b366004611cf5565b610757565b6040519015158152602001610227565b34801561026c57600080fd5b506102756107a9565b6040516102279190611d75565b34801561028e57600080fd5b5061027561029d366004611d88565b610837565b3480156102ae57600080fd5b506102b7610898565b005b3480156102c557600080fd5b506102b76102d4366004611eed565b610937565b3480156102e557600080fd5b506102f96102f4366004611f97565b610983565b604051610227919061209d565b34801561031257600080fd5b50610250610321366004611d88565b600090815260046020526040902054151590565b34801561034157600080fd5b50601c5461034f9060ff1681565b60405161022791906120c6565b34801561036857600080fd5b5061037c6103773660046120ee565b610aad565b604080519485526020850193909352918301526060820152608001610227565b3480156103a857600080fd5b506102b7610aee565b3480156103bd57600080fd5b506102b76103cc366004612109565b610b02565b3480156103dd57600080fd5b5061021d60075481565b3480156103f357600080fd5b5061021d610b25565b34801561040857600080fd5b506010546011546012546013546104229360ff1692919084565b6040805160ff90951685526020850193909352918301526060820152608001610227565b34801561045257600080fd5b506000546040516001600160a01b039091168152602001610227565b34801561047a57600080fd5b5061021d610b53565b34801561048f57600080fd5b506102b761049e36600461212b565b610b65565b3480156104af57600080fd5b50600854600954600a54600b546104229360ff1692919084565b3480156104d557600080fd5b506102b76104e4366004612167565b610b70565b6102b76104f7366004612188565b610b9f565b34801561050857600080fd5b5061021d610517366004611d88565b60009081526004602052604090205490565b34801561053557600080fd5b5061037c6105443660046120ee565b610f6d565b34801561055557600080fd5b506102b761056436600461220c565b610fdf565b34801561057557600080fd5b5061021d60065481565b34801561058b57600080fd5b5061021d60055481565b3480156105a157600080fd5b506102756105b03660046120ee565b611025565b3480156105c157600080fd5b506102506105d0366004612266565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b34801561060a57600080fd5b5061021d61103e565b34801561061f57600080fd5b506014546015546016546017546104229360ff1692919084565b34801561064557600080fd5b506102b7610654366004612299565b611050565b34801561066557600080fd5b506102b76106743660046120ee565b611095565b34801561068557600080fd5b506102756106943660046120ee565b61110e565b3480156106a557600080fd5b50600c54600d54600e54600f546104229360ff1692919084565b60006001600160a01b03831661072f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060009081526001602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061078857506001600160e01b031982166303a24d0760e21b145b806107a357506301ffc9a760e01b6001600160e01b03198316145b92915050565b601880546107b6906122fe565b80601f01602080910402602001604051908101604052809291908181526020018280546107e2906122fe565b801561082f5780601f106108045761010080835404028352916020019161082f565b820191906000526020600020905b81548152906001019060200180831161081257829003601f168201915b505050505081565b6000818152600460205260409020546060906108665760405163090a452960e31b815260040160405180910390fd5b601961087183611127565b604051602001610882929190612355565b6040516020818303038152906040529050919050565b6108a061122d565b47806108bf5760405163341a36d360e21b815260040160405180910390fd5b600080546040516001600160a01b039091169083908381818185875af1925050503d806000811461090c576040519150601f19603f3d011682016040523d82523d6000602084013e610911565b606091505b5050905080610933576040516312e0222360e21b815260040160405180910390fd5b5050565b6001600160a01b038516331480610953575061095385336105d0565b61096f5760405162461bcd60e51b815260040161072690612410565b61097c8585858585611287565b5050505050565b606081518351146109e85760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610726565b6000835167ffffffffffffffff811115610a0457610a04611da1565b604051908082528060200260200182016040528015610a2d578160200160208202803683370190505b50905060005b8451811015610aa557610a78858281518110610a5157610a5161245f565b6020026020010151858381518110610a6b57610a6b61245f565b60200260200101516106bf565b828281518110610a8a57610a8a61245f565b6020908102919091010152610a9e8161248b565b9050610a33565b509392505050565b600080600080610abe8560006106bf565b9350610acb8560016106bf565b9250610ad88560026106bf565b9150610ae58560036106bf565b90509193509193565b610af661122d565b610b006000611475565b565b610b0a61122d565b60058290556006819055610b1e81836124a6565b6007555050565b6000610b2f61103e565b610b37610b53565b610b4191906124a6565b600754610b4e91906124be565b905090565b600f54600b54600091610b4e916124a6565b6109333383836114c5565b610b7861122d565b601c805482919060ff19166001836002811115610b9757610b976120b0565b021790555050565b6000601c5460ff166002811115610bb857610bb86120b0565b1415610bd75760405163336affa360e01b815260040160405180910390fd5b6001601c5460ff166002811115610bf057610bf06120b0565b1415610d9e576000846003811115610c0a57610c0a6120b0565b1415610cda57600a54600090610c219085906124d5565b905080341015610c4457604051631cf2628760e31b815260040160405180910390fd5b600954600090610c559086906124d5565b905060055481610c63610b53565b610c6d91906124a6565b1115610c8c57604051636304271f60e01b815260040160405180910390fd5b8060086003016000828254610ca191906124a6565b90915550610cd3905033876003811115610cbd57610cbd6120b0565b87604051806020016040528060008152506115a6565b5050610f2c565b6001846003811115610cee57610cee6120b0565b1415610d8557600e54600090610d059085906124d5565b905080341015610d2857604051631cf2628760e31b815260040160405180910390fd5b600d54600090610d399086906124d5565b905060055481610d47610b53565b610d5191906124a6565b1115610d7057604051636304271f60e01b815260040160405180910390fd5b80600c6003016000828254610ca191906124a6565b604051634d85ed5d60e11b815260040160405180910390fd5b6002601c5460ff166002811115610db757610db76120b0565b1415610f2c576002846003811115610dd157610dd16120b0565b1415610e6857601254600090610de89085906124d5565b905080341015610e0b57604051631cf2628760e31b815260040160405180910390fd5b601154600090610e1c9086906124d5565b905060065481610e2a61103e565b610e3491906124a6565b1115610e5357604051636304271f60e01b815260040160405180910390fd5b8060106003016000828254610ca191906124a6565b6003846003811115610e7c57610e7c6120b0565b1415610f1357601654600090610e939085906124d5565b905080341015610eb657604051631cf2628760e31b815260040160405180910390fd5b601554600090610ec79086906124d5565b905060065481610ed561103e565b610edf91906124a6565b1115610efe57604051636304271f60e01b815260040160405180910390fd5b8060146003016000828254610ca191906124a6565b60405163019d1a8f60e21b815260040160405180910390fd5b336000908152601a602090815260409091208351610f4c92850190611c00565b50336000908152601b60209081526040909120825161097c92840190611c00565b600080600080600860010154610f848660006106bf565b610f8e91906124d5565b600d54909450610f9f8660016106bf565b610fa991906124d5565b601154909350610fba8660026106bf565b610fc491906124d5565b601554909250610fd58660036106bf565b610ae591906124d5565b336000908152601a602090815260409091208351610fff92850190611c00565b50336000908152601b60209081526040909120825161102092840190611c00565b505050565b601a60205260009081526040902080546107b6906122fe565b601754601354600091610b4e916124a6565b6001600160a01b03851633148061106c575061106c85336105d0565b6110885760405162461bcd60e51b815260040161072690612410565b61097c85858585856116cb565b61109d61122d565b6001600160a01b0381166111025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610726565b61110b81611475565b50565b601b60205260009081526040902080546107b6906122fe565b60608161114b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611175578061115f8161248b565b915061116e9050600a8361250a565b915061114f565b60008167ffffffffffffffff81111561119057611190611da1565b6040519080825280601f01601f1916602001820160405280156111ba576020820181803683370190505b5090505b8415611225576111cf6001836124be565b91506111dc600a8661251e565b6111e79060306124a6565b60f81b8183815181106111fc576111fc61245f565b60200101906001600160f81b031916908160001a90535061121e600a8661250a565b94506111be565b949350505050565b6000546001600160a01b03163314610b005760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610726565b81518351146112e95760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610726565b6001600160a01b03841661130f5760405162461bcd60e51b815260040161072690612532565b3361131e818787878787611807565b60005b845181101561140757600085828151811061133e5761133e61245f565b60200260200101519050600085838151811061135c5761135c61245f565b60209081029190910181015160008481526001835260408082206001600160a01b038e1683529093529190912054909150818110156113ad5760405162461bcd60e51b815260040161072690612577565b60008381526001602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906113ec9084906124a6565b92505081905550505050806114009061248b565b9050611321565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516114579291906125c1565b60405180910390a461146d818787878787611980565b505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031614156115395760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610726565b6001600160a01b03838116600081815260026020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166116065760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610726565b33600061161285611aeb565b9050600061161f85611aeb565b905061163083600089858589611807565b60008681526001602090815260408083206001600160a01b038b168452909152812080548792906116629084906124a6565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46116c283600089898989611b36565b50505050505050565b6001600160a01b0384166116f15760405162461bcd60e51b815260040161072690612532565b3360006116fd85611aeb565b9050600061170a85611aeb565b905061171a838989858589611807565b60008681526001602090815260408083206001600160a01b038c1684529091529020548581101561175d5760405162461bcd60e51b815260040161072690612577565b60008781526001602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061179c9084906124a6565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46117fc848a8a8a8a8a611b36565b505050505050505050565b6001600160a01b03851661188e5760005b835181101561188c578281815181106118335761183361245f565b6020026020010151600460008684815181106118515761185161245f565b60200260200101518152602001908152602001600020600082825461187691906124a6565b9091555061188590508161248b565b9050611818565b505b6001600160a01b03841661146d5760005b83518110156116c25760008482815181106118bc576118bc61245f565b6020026020010151905060008483815181106118da576118da61245f565b602002602001015190506000600460008481526020019081526020016000205490508181101561195d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610726565b600092835260046020526040909220910390556119798161248b565b905061189f565b6001600160a01b0384163b1561146d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906119c490899089908890889088906004016125e6565b602060405180830381600087803b1580156119de57600080fd5b505af1925050508015611a0e575060408051601f3d908101601f19168201909252611a0b91810190612644565b60015b611abb57611a1a612661565b806308c379a01415611a545750611a2f61267d565b80611a3a5750611a56565b8060405162461bcd60e51b81526004016107269190611d75565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610726565b6001600160e01b0319811663bc197c8160e01b146116c25760405162461bcd60e51b815260040161072690612707565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611b2557611b2561245f565b602090810291909101015292915050565b6001600160a01b0384163b1561146d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611b7a908990899088908890889060040161274f565b602060405180830381600087803b158015611b9457600080fd5b505af1925050508015611bc4575060408051601f3d908101601f19168201909252611bc191810190612644565b60015b611bd057611a1a612661565b6001600160e01b0319811663f23a6e6160e01b146116c25760405162461bcd60e51b815260040161072690612707565b828054611c0c906122fe565b90600052602060002090601f016020900481019282611c2e5760008555611c74565b82601f10611c4757805160ff1916838001178555611c74565b82800160010185558215611c74579182015b82811115611c74578251825591602001919060010190611c59565b50611c80929150611c84565b5090565b5b80821115611c805760008155600101611c85565b80356001600160a01b0381168114611cb057600080fd5b919050565b60008060408385031215611cc857600080fd5b611cd183611c99565b946020939093013593505050565b6001600160e01b03198116811461110b57600080fd5b600060208284031215611d0757600080fd5b8135611d1281611cdf565b9392505050565b60005b83811015611d34578181015183820152602001611d1c565b83811115611d43576000848401525b50505050565b60008151808452611d61816020860160208601611d19565b601f01601f19169290920160200192915050565b602081526000611d126020830184611d49565b600060208284031215611d9a57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715611ddd57611ddd611da1565b6040525050565b600067ffffffffffffffff821115611dfe57611dfe611da1565b5060051b60200190565b600082601f830112611e1957600080fd5b81356020611e2682611de4565b604051611e338282611db7565b83815260059390931b8501820192828101915086841115611e5357600080fd5b8286015b84811015611e6e5780358352918301918301611e57565b509695505050505050565b600082601f830112611e8a57600080fd5b813567ffffffffffffffff811115611ea457611ea4611da1565b604051611ebb601f8301601f191660200182611db7565b818152846020838601011115611ed057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611f0557600080fd5b611f0e86611c99565b9450611f1c60208701611c99565b9350604086013567ffffffffffffffff80821115611f3957600080fd5b611f4589838a01611e08565b94506060880135915080821115611f5b57600080fd5b611f6789838a01611e08565b93506080880135915080821115611f7d57600080fd5b50611f8a88828901611e79565b9150509295509295909350565b60008060408385031215611faa57600080fd5b823567ffffffffffffffff80821115611fc257600080fd5b818501915085601f830112611fd657600080fd5b81356020611fe382611de4565b604051611ff08282611db7565b83815260059390931b850182019282810191508984111561201057600080fd5b948201945b838610156120355761202686611c99565b82529482019490820190612015565b9650508601359250508082111561204b57600080fd5b5061205885828601611e08565b9150509250929050565b600081518084526020808501945080840160005b8381101561209257815187529582019590820190600101612076565b509495945050505050565b602081526000611d126020830184612062565b634e487b7160e01b600052602160045260246000fd5b60208101600383106120e857634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561210057600080fd5b611d1282611c99565b6000806040838503121561211c57600080fd5b50508035926020909101359150565b6000806040838503121561213e57600080fd5b61214783611c99565b91506020830135801515811461215c57600080fd5b809150509250929050565b60006020828403121561217957600080fd5b813560038110611d1257600080fd5b6000806000806080858703121561219e57600080fd5b8435600481106121ad57600080fd5b935060208501359250604085013567ffffffffffffffff808211156121d157600080fd5b6121dd88838901611e79565b935060608701359150808211156121f357600080fd5b5061220087828801611e79565b91505092959194509250565b6000806040838503121561221f57600080fd5b823567ffffffffffffffff8082111561223757600080fd5b61224386838701611e79565b9350602085013591508082111561225957600080fd5b5061205885828601611e79565b6000806040838503121561227957600080fd5b61228283611c99565b915061229060208401611c99565b90509250929050565b600080600080600060a086880312156122b157600080fd5b6122ba86611c99565b94506122c860208701611c99565b93506040860135925060608601359150608086013567ffffffffffffffff8111156122f257600080fd5b611f8a88828901611e79565b600181811c9082168061231257607f821691505b6020821081141561233357634e487b7160e01b600052602260045260246000fd5b50919050565b6000815161234b818560208601611d19565b9290920192915050565b600080845481600182811c91508083168061237157607f831692505b602080841082141561239157634e487b7160e01b86526022600452602486fd5b8180156123a557600181146123b6576123e3565b60ff198616895284890196506123e3565b60008b81526020902060005b868110156123db5781548b8201529085019083016123c2565b505084890196505b5050505050506124076123f68286612339565b64173539b7b760d91b815260050190565b95945050505050565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561249f5761249f612475565b5060010190565b600082198211156124b9576124b9612475565b500190565b6000828210156124d0576124d0612475565b500390565b60008160001904831182151516156124ef576124ef612475565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612519576125196124f4565b500490565b60008261252d5761252d6124f4565b500690565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006125d46040830185612062565b82810360208401526124078185612062565b6001600160a01b0386811682528516602082015260a06040820181905260009061261290830186612062565b82810360608401526126248186612062565b905082810360808401526126388185611d49565b98975050505050505050565b60006020828403121561265657600080fd5b8151611d1281611cdf565b600060033d111561267a5760046000803e5060005160e01c5b90565b600060443d101561268b5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156126bb57505050505090565b82850191508151818111156126d35750505050505090565b843d87010160208285010111156126ed5750505050505090565b6126fc60208286010187611db7565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061278990830184611d49565b97965050505050505056fea2646970667358221220944fb85811767c71db9b14338e96912f67e1f2e4ef13cbb995fe2543b52a889364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 138,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 144,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 146,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "_uri",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1508,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2279,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "THForPresale",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2282,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "THForPublicsale",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2287,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "totalTerraHashes",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2296,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "vipBlack",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Tokentype)2351_storage"
      },
      {
        "astId": 2305,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "vipBlue",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Tokentype)2351_storage"
      },
      {
        "astId": 2314,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "black",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(Tokentype)2351_storage"
      },
      {
        "astId": 2323,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "blue",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(Tokentype)2351_storage"
      },
      {
        "astId": 2326,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "name",
        "offset": 0,
        "slot": "24",
        "type": "t_string_storage"
      },
      {
        "astId": 2329,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "baseURL",
        "offset": 0,
        "slot": "25",
        "type": "t_string_storage"
      },
      {
        "astId": 2333,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "bitCoinAddress",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 2337,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "emailAddress",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 2360,
        "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
        "label": "saleType",
        "offset": 0,
        "slot": "28",
        "type": "t_enum(SaleTpe)2355"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(SaleTpe)2355": {
        "encoding": "inplace",
        "label": "enum BitStackerNFT.SaleTpe",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Tokentype)2351_storage": {
        "encoding": "inplace",
        "label": "struct BitStackerNFT.Tokentype",
        "members": [
          {
            "astId": 2344,
            "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2346,
            "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
            "label": "hashRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2348,
            "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2350,
            "contract": "contracts/BitStackerNFT.sol:BitStackerNFT",
            "label": "terraHashedSold",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}